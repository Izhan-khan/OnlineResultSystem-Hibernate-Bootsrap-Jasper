package in.co.sunrays.proj3.controller;

import in.co.sunrays.proj3.dto.BaseDTO;
import in.co.sunrays.proj3.dto.TimeTableDTO;
import in.co.sunrays.proj3.exception.ApplicationException;
import in.co.sunrays.proj3.exception.DuplicateRecordException;
import in.co.sunrays.proj3.exception.RecordNotFoundException;
import in.co.sunrays.proj3.model.CourseModel_Interface;
import in.co.sunrays.proj3.model.ModelFactory;
import in.co.sunrays.proj3.model.SubjectModel_Interface;
import in.co.sunrays.proj3.model.TimeTableModel_Interface;
import in.co.sunrays.proj3.utility.DataUtility;
import in.co.sunrays.proj3.utility.DataValidator;
import in.co.sunrays.proj3.utility.PropertyReader;
import in.co.sunrays.proj3.utility.ServletUtility;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

/**
 * TimeTable functionality Controller. Performs operation for add, update,
 * delete and get TimeTable
 * 
 * @author SUNRAYS Technologies
 * @version 1.0
 * @Copyright (c) SUNRAYS Technologies
 */
@WebServlet("/controller/TimeTable_Controller")
public class TimeTable_Controller extends Base_Controller {

	private static Logger log = Logger.getLogger(TimeTable_Controller.class);

	@Override
	protected void preload(HttpServletRequest request) {
		CourseModel_Interface coursemodel = ModelFactory.getInstance().getCourseModel();
		SubjectModel_Interface subjectmodel = ModelFactory.getInstance().getSubjectModel();
		try {
			List courselist = coursemodel.list();
			List subjectlist = subjectmodel.list();
			request.setAttribute("collegeList", courselist);
			request.setAttribute("collegeList", subjectlist);
		} catch (ApplicationException e) {
			log.error(e);
		}

	}

	@Override
	protected boolean validate(HttpServletRequest request) {

		log.info("TimeTableCtl Method validate Started");

		boolean pass = true;

		String op = DataUtility.getString(request.getParameter("operation"));
		String email = request.getParameter("email");
		String dob = request.getParameter("dob");

		if (DataValidator.isNull(request.getParameter("examDate"))) {
			request.setAttribute("examDate", PropertyReader.getValue("error.select", "Exam Date"));
			pass = false;
		}
		if (DataValidator.isNull(request.getParameter("semester"))) {
			request.setAttribute("semester", PropertyReader.getValue("error.select", "Semester"));
			pass = false;
		}

		if (DataValidator.isNull(request.getParameter("examTime"))) {
			request.setAttribute("examTime", PropertyReader.getValue("error.select", "Exam Time"));
			pass = false;
		}
		if (DataValidator.isNull(request.getParameter("courseId"))) {
			request.setAttribute("courseId", PropertyReader.getValue("error.select", "Course Id"));
			pass = false;
		}

		if (DataValidator.isNull(request.getParameter("subjectId"))) {
			request.setAttribute("subjectId", PropertyReader.getValue("error.select", "Subject Id"));
			pass = false;
		}

		log.info("TimeTableCtl Method validate Ended");

		return pass;
	}

	@Override
	protected BaseDTO populateDTO(HttpServletRequest request) {

		log.info("TimeTableCtl Method populateDTO Started");

		TimeTableDTO dto = new TimeTableDTO();

		dto.setId(DataUtility.getLong(request.getParameter("id")));

		dto.setExamTime(DataUtility.getString(request.getParameter("examTime")));

		dto.setExamDate(DataUtility.getDate(request.getParameter("examDate")));

		dto.setCourseId(DataUtility.getLong(request.getParameter("courseId")));

		dto.setSubjectId(DataUtility.getLong(request.getParameter("subjectId")));

		dto.setSemester(DataUtility.getLong(request.getParameter("semester")));

		log.info("TimeTableCtl Method populateDTO Ended");

		return dto;
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		log.info("TimeTableCtl Method doGet Started");

		String op = DataUtility.getString(request.getParameter("operation"));

		// get model

		TimeTableModel_Interface model = ModelFactory.getInstance().getTimeTableModel();

		long id = DataUtility.getLong(request.getParameter("id"));

		if (OP_SAVE.equalsIgnoreCase(op)) {

			TimeTableDTO dto = (TimeTableDTO) populateDTO(request);

			try {
				if (id > 0) {
					model.update(dto);
				} else {
					long pk = model.add(dto);
					dto.setId(pk);
				}

				ServletUtility.setDto(dto, request);
				ServletUtility.setSuccessMessage("Data is successfully saved", request);

			} catch (ApplicationException e) {
				log.error(e);
				ServletUtility.handleException(e, request, response);
				return;
			} catch (DuplicateRecordException e) {
				ServletUtility.setDto(dto, request);
				ServletUtility.setErrorMessage("TimeTable already exists", request);
			} catch (RecordNotFoundException e) {
				ServletUtility.setDto(dto, request);
				e.printStackTrace();
			}

		}

		else if (OP_DELETE.equalsIgnoreCase(op)) {

			TimeTableDTO dto = (TimeTableDTO) populateDTO(request);
			try {
				model.delete(dto);
				ServletUtility.redirect(ORSView.TIMETABLE_LIST_CTL, request, response);
				return;

			} catch (ApplicationException e) {
				log.error(e);
				ServletUtility.handleException(e, request, response);
				return;
			} catch (RecordNotFoundException e) {
				ServletUtility.setDto(dto, request);
				e.printStackTrace();
			}

		} else if (OP_CANCEL.equalsIgnoreCase(op)) {

			ServletUtility.redirect(ORSView.TIMETABLE_LIST_CTL, request, response);
			return;

		} else { // View page

			if (id > 0 || op != null) {
				TimeTableDTO dto;
				try {
					dto = model.findByPK(id);
					ServletUtility.setDto(dto, request);
				} catch (ApplicationException e) {
					log.error(e);
					ServletUtility.handleException(e, request, response);
					return;
				}
			}
		}

		ServletUtility.forward(ORSView.TIMETABLE_VIEW, request, response);

		log.info("TimeTableCtl Method doGet Ended");
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		doGet(req, resp);

	}

	@Override
	protected String getView() {
		return ORSView.TIMETABLE_VIEW;
	}

}